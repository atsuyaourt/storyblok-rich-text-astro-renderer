---
import { resolveRichTextToNodes } from "./dist/index.mjs";
import type { ComponentNode, Options, RichTextType } from "./dist/types";

export type Props = {
  content: RichTextType;
  schema?: Options["schema"];
  /**
   Resolver function used for rendering inlined CMS bloks. Usually via StoryblokComponent, f.e.
   ```
    resolver={(blok) => {
       return {
         component: StoryblokComponent,
         props: { blok },
       };
    }}
   ```
   */
  resolver: Options["resolver"];
};

const { content, schema, resolver, ...props } = Astro.props;

const nodes = resolveRichTextToNodes(content, { schema, resolver });
---

<div {...props}>
  {
    () => {
      const renderNode = (node: ComponentNode) => {
        if (node == null) return;

        const { component: Component = Fragment, content, props } = node;

        let resolvedContent = content;
        let trueProps = { ...props };

        if (Array.isArray(content)) {
          if (props && "contentPropName" in props && content.length === 1) {
            let { contentPropName, ...tProps } = props;
            trueProps = {
              ...tProps,
              [contentPropName]: content[0].content,
            };
            resolvedContent = undefined;
          } else {
            resolvedContent = content.map(renderNode);
          }
        }

        return <Component {...trueProps}>{resolvedContent}</Component>;
      };

      return nodes.map(renderNode);
    }
  }
</div>
